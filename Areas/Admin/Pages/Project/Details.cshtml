@page
@model IssueTracker.Areas.Admin.Pages.ManageProject.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<div>
    <h1>Project</h1>
    <hr />

    <ul class="nav nav-tabs" id="projectDetailsTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details-tab-pane" type="button" role="tab" aria-controls="details-tab-pane" aria-selected="true">Details</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="members-tab" data-bs-toggle="tab" data-bs-target="#members-tab-pane" type="button" role="tab" aria-controls="members-tab-pane" aria-selected="false">Members</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="swimlanes-tab" data-bs-toggle="tab" data-bs-target="#swimlanes-tab-pane" type="button" role="tab" aria-controls="swimlanes-tab-pane" aria-selected="false">Swimlanes</button>
        </li>
    </ul>
    <div class="tab-content" id="projectDetailsTabContent">
        @* Project details tab *@
        <div class="tab-pane fade show active" id="details-tab-pane" role="tabpanel" aria-labelledby="details-tab" tabindex="0">
            @await Component.InvokeAsync("ProjectDetails", new {
                project = Model.Project
            })
        </div>
        @* Project members tab. Will be filled using js *@
        <div class="tab-pane fade" id="members-tab-pane" role="tabpanel" aria-labelledby="members-tab" tabindex="0"></div>
        @* Swimlanes tab. Will be filled using js *@
        <div class="tab-pane fade" id="swimlanes-tab-pane" role="tabpanel" aria-labelledby="swimlanes-tab" tabindex="0"></div>
        @* Add member modal *@
        <div class="modal modal-dialog modal-dialog-centered fade" id="addMemberModal" tabindex="-1" aria-labelledby="addMemberModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                <form method="post" asp-page-handler="AddMember" asp-route-id="@Model.Project.Id">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="addMemberModalLabel">Add member</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label asp-for="Input.UserId" class="control-label"></label>
                            <select asp-for="Input.UserId" class ="form-control" asp-items="ViewBag.UserId"></select>
                        </div>
                        <input type="hidden" name="id" value="@Model.Project.Id">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button class="btn btn-primary">Save changes</button>
                    </div>
                </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/sortable.min.js"></script>
    <script>
        const tabs = document.querySelectorAll('button[data-bs-toggle="tab"]');
        const spinner = `<div class="d-flex justify-content-center align-items-center" style="height: 50vh;"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>`;

        tabs.forEach(tab => {
            tab.addEventListener('shown.bs.tab', event => {
                const targetId = event.target.dataset.bsTarget;
                const endpoint = event.target.id.split("-")[0];
                updateView(targetId, endpoint);
            })
        })

        async function updateView(targetId, endpoint) {
            const target = $(targetId);
            target.html(spinner);
            const url = new URL(window.location.href);
            const queryParams = new URLSearchParams(url.search);
            try {
                let response = await fetch(`/api/project/${endpoint}?id=${queryParams.get("id")}`);
                let newHtml = await response.text();
                target.empty();
                target.html(newHtml);
            } catch(e) {
                console.log(e);
            }
        }
    </script>
}