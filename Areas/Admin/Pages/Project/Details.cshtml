@page
@model IssueTracker.Areas.Admin.Pages.ManageProject.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<div>
    <h1>Project</h1>
    <hr />

    <ul class="nav nav-tabs" id="projectDetailsTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="details-tab" data-bs-toggle="tab" data-bs-target="#details-tab-pane" type="button" role="tab" aria-controls="details-tab-pane" aria-selected="true">Details</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="members-tab" data-bs-toggle="tab" data-bs-target="#members-tab-pane" type="button" role="tab" aria-controls="members-tab-pane" aria-selected="false">Members</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="swimlanes-tab" data-bs-toggle="tab" data-bs-target="#swimlanes-tab-pane" type="button" role="tab" aria-controls="swimlanes-tab-pane" aria-selected="false">Swimlanes</button>
        </li>
    </ul>
    <div class="tab-content" id="projectDetailsTabContent">
        @* Project details tab *@
        <div class="tab-pane fade show active" id="details-tab-pane" role="tabpanel" aria-labelledby="details-tab" tabindex="0">
            @await Component.InvokeAsync("ProjectDetails", new {
                project = Model.Project
            })
        </div>
        @* Project members tab. Will be filled using js *@
        <div class="tab-pane fade" id="members-tab-pane" role="tabpanel" aria-labelledby="members-tab" tabindex="0"></div>
        @* Swimlanes tab. Will be filled using js *@
        <div class="tab-pane fade" id="swimlanes-tab-pane" role="tabpanel" aria-labelledby="swimlanes-tab" tabindex="0"></div>
        @* Add member modal. Content will be loaded via AJAX *@
        <div class="modal fade" style="display: none;" id="addMemberModal" tabindex="-1" aria-labelledby="addMemberModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                </div>
            </div>
        </div>
        @* Add swimlane modal. Content will be loaded via AJAX *@
        <div class="modal fade" style="display: none;" id="addSwimlanesModal" tabindex="-1" aria-labelledby="addSwimlanesModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/sortable.min.js"></script>
    <script>
        const tabs = document.querySelectorAll('button[data-bs-toggle="tab"]');
        const spinner = `<div class="d-flex justify-content-center align-items-center" style="height: 50vh;"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>`;

        // Fetch content for current tab and display it
        async function updateView(targetId, endpoint) {
            const target = $(targetId);
            target.html(spinner);
            const url = new URL(window.location.href);
            const queryParams = new URLSearchParams(url.search);
            try {
                let response = await fetch(`/api/project/${endpoint}?id=${queryParams.get("id")}`);
                let newHtml = await response.text();
                target.empty();
                target.html(newHtml);
                attachEventListeners(endpoint);
            } catch(e) {
                console.log(e);
            }
        }

        // Attach event listeners for newly fetched content
        async function attachEventListeners(endpoint) {
            const url = new URL(window.location.href);
            const queryParams = new URLSearchParams(url.search);
            // Remove plural s from endpoint
            const newEndpoint = endpoint.substring(0, endpoint.length - 1);

            $(".delete").click(async e => {
                // Update DOM
                $(e.target).closest("tr").remove();
                // Send HTTP delete request
                await fetch(`/api/project/${newEndpoint}?projectId=${queryParams.get("id")}&swimlaneId=${event.target.dataset.swimlaneId}`, { method: "DELETE" });
            });
        }

        // Fetch add member or swimlane form
        function fetchForm(subject, elToUpdate) {
            const addMemberModal = document.getElementById(`add${subject}Modal`);
            addMemberModal.addEventListener("shown.bs.modal", async e => {
                // Show spinner
                $(`#add${subject}Modal .modal-content`).html(`<div class="modal-body">${spinner.replace("50vh", "10vh")}</div>`);
                // Load form using AJAX and attach its event listeners
                $(`#add${subject}Modal .modal-content`).load(`/api/project/GetAdd${subject}Form`, (event) => {
                    $(`#add-${subject.toLowerCase()}-form`).submit(async evt => {
                        evt.preventDefault();
                        // Grab project Id from URL
                        const url = new URL(window.location.href);
                        const queryParams = new URLSearchParams(url.search);
                        // Get form values
                        const payload = new URLSearchParams();
                        payload.append("ProjectId", queryParams.get("id"));
                        $.each($(evt.target).serializeArray(), function(_, field) {
                            if(!payload.has(field.name)) payload.append(field.name, field.value);
                        });
                        // Post data
                        const response = await fetch(`/api/project/Add${subject}?projectId${queryParams.get("id")}`, {
                            method: "POST", 
                            headers: { "Content-Type": "application/x-www-form-urlencoded" },
                            body: payload
                        });
                        // Refresh UI
                        if(response.ok) $(elToUpdate).html(await response.text());
                    })
                });
            });
        }

        // Listen for tab click events
        tabs.forEach(tab => {
            tab.addEventListener('shown.bs.tab', event => {
                const targetId = event.target.dataset.bsTarget;
                const endpoint = event.target.id.split("-")[0];
                updateView(targetId, endpoint);
            })
        })

        fetchForm("Member", "#members-tab-pane");
        fetchForm("Swimlanes", "#swimlanes-tab-pane");

    </script>
}